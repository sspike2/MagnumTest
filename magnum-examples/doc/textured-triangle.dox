/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019,
                2020, 2021 Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-textured-triangle Textured Triangle
@brief Importing image data, texturing and custom shaders.

@tableofcontents
@m_footernavigation

@image html textured-triangle.png

This example extends the basic @ref examples-triangle "Triangle example" with
these features:

-   Working with textures and using the @ref Trade library for importing image
    data.
-   Creating custom shaders.
-   Storing resources in the executable, so they don't have to be carried as
    separate files along the application.

@m_div{m-button m-primary} <a href="https://magnum.graphics/showcase/textured-triangle/">@m_div{m-big}Live web demo @m_enddiv @m_div{m-small} uses WebAssembly & WebGL @m_enddiv </a> @m_enddiv

@section examples-textured-triangle-skeleton Basic skeleton

Compared to the original triangle example, we need extra includes for loading
image data and uploading them to a texture:

@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip #include
@until TexturedTriangleShader.h

The basic skeleton of main example class is similar to the original, except for
a custom shader and added @ref GL::Texture2D.

@skip class TexturedTriangle
@until };

@section examples-textured-triangle-shader Textured triangle shader

Let's start with the shader. The shader takes 2D vertex position and 2D texture
coordinates. We declare both attributes as @ref Vector2; assign vertex position
to location zero and texture coordinates to location one. The locations can be
chosen pretty arbitrarily, but location zero should be always occupied. It's
also good to make attribute declarations compatible between shaders so you can
use a mesh configured for one shader with another shader.

Next to these two attributes it also needs a uniform for the base color and a
texture binding. We will provide convenience public API for setting these two
parameters. Good practice is to allow @ref method-chaining "method chaining" on
them.

@dontinclude textured-triangle/TexturedTriangleShader.h
@skip class TexturedTriangleShader
@until };
@until };

We store GLSL sources as compiled-in resources because that's the most
convenient way --- by storing them in a string directly in the source we would
lose syntax highlighting and line numbering in case the GLSL compiler fails
with an error, whereas by storing them as separate files we would need to carry
these along the executable. The resource data will be compiled into the binary
using CMake later. You can read more about compiled-in resources in Corrade's
@ref resource-management "resource management tutorial".

In the constructor we load the GLSL sources from compiled-in resources, compile
and attach them and link the program together. Note that we explicitly check
for compilation and link status --- it's better to exit the program immediately
instead of leaving it in some unexpected state. We then retrieve location for
the base color uniform. Then we set the texture layer uniform to fixed value,
so it doesn't have to be set manually when using the shader for rendering. We
require OpenGL 3.3 in the shader, so the attribute locations can be
conveniently set @ref GL-AbstractShaderProgram-attribute-location "directly in the shader source".
With newer OpenGL versions we could also explicitly set uniform locations and
texture layers itself, see @ref GL-AbstractShaderProgram-uniform-location and
@ref GL-AbstractShaderProgram-texture-units. However, in this example we will
keep compatibility with OpenGL 3.3.

@dontinclude textured-triangle/TexturedTriangleShader.cpp
@skip TexturedTriangleShader::TexturedTriangleShader
@until }
@until }
@until }
@until }
@until }
@until }

The `TexturedTriangleShader.vert` shader just sets the position and passes
texture coordinates through to fragment shader. Note the explicit attribute
locations:

@dontinclude textured-triangle/TexturedTriangleShader.vert
@skip layout
@until }

`TexturedTriangleShader.frag` loads color from the texture and multiplies it
with color we specified in the uniform:

@dontinclude textured-triangle/TexturedTriangleShader.frag
@skip uniform
@until }

@m_class{m-block m-success}

@par Builtin textured shader
    While the main purpose of this example is to show how to create custom
    shaders, please note that there's a builtin equivalent of the above shader
    as well --- @ref Shaders::Flat2D. Pass @ref Shaders::Flat2D::Flag::Textured
    to its constructor to get a textured version. It also contains setters for
    passing transformation matrices, those were omitted from the code above to
    keep the example short and simple.

@section examples-textured-triangle-setup Setting up the mesh and texture

As specified in the shader above, we use @ref Vector2 for both 2D vertex
positions and 2D texture coordinates:

@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip TexturedTriangleExample::TexturedTriangleExample
@until };
@until };

We then fill the buffer, configure mesh primitive and vertex count and specify
attribute locations in the buffer for use with our shader:

@skipline GL::Buffer
@until addVertexBuffer
@until }
@until }

Now we will instantiate the plugin manager and try to load the
@ref Trade::TgaImporter "TgaImporter" plugin. If the plugin cannot be loaded,
we exit immediately. You can read more about plugin directory locations and
plugin loading in @ref plugins.

@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip PluginManager::Manager
@until manager.loadAndInstantiate
@until exit

Now we need to load the texture. Similarly to shader sources, the texture is
also stored as resource in the executable.

@dontinclude textured-triangle/TexturedTriangleExample.cpp
@skip Utility::Resource
@until }
@until exit

After the image is loaded, we create a texture from it. Note that we have to
explicitly set all required texture parameters, otherwise the texture will be
incomplete. @ref GL::textureFormat() is a convenience utility that picks up
@ref GL::TextureFormat::RGB8, @ref GL::TextureFormat::RGBA8 or any other based
on image's @ref PixelFormat.

@skip Containers::Optional<Trade::ImageData2D>
@until }
@until }

The drawing function is again fairly simple. We clear the buffer, set base
color to light red, set the texture and perform the drawing. Last thing is
again buffer swap.

@skip TexturedTriangleExample::drawEvent
@until }

And, don't forget the main function:

@code{.cpp}
MAGNUM_APPLICATION_MAIN(TexturedTriangleExample)
@endcode

@section examples-textured-triangle-compilation Compilation

Compilation is slightly more complicated compared to previous examples, because
we need to compile our resources into the executable.

The `resources.conf` file lists all resources which need to be compiled into
the executable --- that is our GLSL shader sources and the texture image (the
one used in the above screenshot is [stone.tga](https://github.com/mosra/magnum-examples/raw/master/src/textured-triangle/stone.tga)).
All resource groups need to have unique identifier by which they are accessed,
we will use `textured-triangle-data` as above. As said above, the resource
compilation process is explained thoroughly in Corrade's
@ref resource-management "resource management tutorial".

@include textured-triangle/resources.conf

In the `CMakeLists.txt` file first we find the required Magnum package, now
asking for the @ref Trade library as well:

@dontinclude textured-triangle/CMakeLists.txt
@skip find_package
@until set_directory_properties

After that we compile the resources using the
@ref corrade-cmake-add-resource "corrade_add_resource()" macro and create an
executable from the result and other source files. Last step is linking to all
needed libraries. The plugin is loaded dynamically, so it's not handled by
CMake in any way.

@dontinclude textured-triangle/CMakeLists.txt
@skip corrade_add_resource
@until Magnum::Trade)

@m_class{m-block m-success}

@par Enabling additional Magnum components in your project
    If you're using the CMake subproject setup described in the
    @ref getting-started "Getting Started Guide", you'll need to modify the
    top-level `CMakeLists.txt` to enable the @ref Trade::TgaImporter "TgaImporter"
    plugin as well. Because the plugins are loaded at runtime, CMake doesn't
    know we need them to be built --- one option is to list them explicitly
    like shown below, another (but uglier) is to not use `EXCLUDE_FROM_ALL` on
    the magnum subdirectory, so everything is always built implicitly. The
    plugin modules are placed into `Debug/lib/magnum-d/importers` (or
    `Debug/bin/magnum-d/importers` on Windows) in the build directory and the
    @ref Trade library will find them there on its own.
@par
    @code{.cmake}
    ...

    set(WITH_SDL2APPLICATION ON CACHE BOOL "" FORCE)
    set(WITH_TGAIMPORTER ON CACHE BOOL "" FORCE)
    add_subdirectory(magnum EXCLUDE_FROM_ALL)

    # So the TgaImporter gets built implicitly
    add_dependencies(magnum-textured-triangle Magnum::TgaImporter)
    @endcode
@par
    If you're using a Magnum package, @ref Trade::TgaImporter "TgaImporter" is
    included by default (and you don't need to do anything in CMake in order to
    use it); if you build it yourself, make sure you have `WITH_TGAIMPORTER`
    enabled.

Once the application builds and starts, you can now try playing around with the
shader source, modifying texture coordinates or adding other effects. The full
file content is linked below. Full source code is also available in the
[magnum-examples GitHub repository](https://github.com/mosra/magnum-examples/tree/master/src/textured-triangle).

-   @ref textured-triangle/CMakeLists.txt "CMakeLists.txt"
-   @ref textured-triangle/resources.conf "resources.conf"
-   @ref textured-triangle/TexturedTriangleExample.cpp "TexturedTriangleExample.cpp"
-   @ref textured-triangle/TexturedTriangleShader.cpp "TexturedTriangleShader.cpp"
-   @ref textured-triangle/TexturedTriangleShader.frag "TexturedTriangleShader.frag"
-   @ref textured-triangle/TexturedTriangleShader.h "TexturedTriangleShader.h"
-   @ref textured-triangle/TexturedTriangleShader.vert "TexturedTriangleShader.vert"
-   [stone.tga](https://github.com/mosra/magnum-examples/raw/master/src/textured-triangle/stone.tga)

The [ports branch](https://github.com/mosra/magnum-examples/tree/ports/src/textured-triangle)
contains additional patches for @ref CORRADE_TARGET_IOS "iOS",
@ref CORRADE_TARGET_ANDROID "Android" and @ref CORRADE_TARGET_EMSCRIPTEN "Emscripten"
support that aren't present in `master` in order to keep the example code as
simple as possible.

@section examples-textured-triangle-importers PNG, JPEG and other file formats

In an effort to keep the core Magnum repository small, it has support just for
the TGA format. But it doesn't stop there, the
@ref building-plugins "Magnum Plugins" repository provides support for many
more file formats. Let's try loading arbitrary files instead --- the
@ref Trade::AnyImageImporter "AnyImageImporter" plugin autodetects a file
format and then delegates to a plugin that knows how to load PNGs. All you
need to do is load it instead of @cpp "TgaImporter" @ce and then bundle a
different file type --- or rewrite the example to take files from the
filesystem instead:

@code{.cpp}
Containers::Pointer<Trade::AbstractImporter> importer =
    manager.loadAndInstantiate("AnyImageImporter");
if(!importer) std::exit(1);

if(!importer->openFile("/path/to/myfile.jpg"))
    std::exit(2);
@endcode

See @ref plugins for more information about how plugin loading and selection
works. The next tutorial, @ref examples-viewer, expands further on this topic
and also shows how to open files passed via command-line arguments.

@m_class{m-block m-success}

@par Enabling Magnum Plugins in your project
    If you're using the CMake subproject setup described in the
    @ref getting-started "Getting Started Guide", you'll need to modify the
    top-level `CMakeLists.txt` to add Magnum Plugins as a subdirectory and
    enable the new plugins. The @ref Trade::StbImageImporter "StbImageImporter"
    is an universal dependency-less plugin that can handle PNGs, JPEGs and
    other common files:
@par
    @code{.cmake}
    ...

    set(WITH_ANYIMAGEIMPORTER ON CACHE BOOL "" FORCE)
    add_subdirectory(magnum EXCLUDE_FROM_ALL)

    set(WITH_STBIMAGEIMPORTER ON CACHE BOOL "" FORCE)
    # git clone https://github.com/mosra/magnum-plugins.git
    add_subdirectory(magnum-plugins EXCLUDE_FROM_ALL)

    add_dependencies(magnum-textured-triangle
        Magnum::AnyImageImporter
        MagnumPlugins::StbImageImporter)
    @endcode
@par
    If you're using packaged Magnum, install
    @ref building-plugins-packages "Magnum Plugins" the same way as you did with
    Magnum, all the above-mentioned plugins are included by default (and you
    don't need to do anything in CMake in order to use them). If you build it
    yourself, make sure you have `WITH_ANYIMAGEIMPORTER` enabled for Magnum and
    `WITH_STBIMAGEIMPORTER` enabled for Magnum Plugins.

@example textured-triangle/CMakeLists.txt @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/resources.conf @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleExample.cpp @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleShader.cpp @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleShader.frag @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleShader.h @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation
@example textured-triangle/TexturedTriangleShader.vert @m_examplenavigation{examples-textured-triangle,textured-triangle/} @m_footernavigation

*/
}
