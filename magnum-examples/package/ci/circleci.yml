version: 2.1

notify:
  webhooks:
    # Unfortunately Gitter messages are too verbose (one five-line message per
    # each job in the build matrix) and thus not wanted
    #- url: https://webhooks.gitter.im/e/cfbadbd34d28708a57c6

executors:
  ubuntu-16_04:
    docker:
    - image: ubuntu:xenial-20201014
  xcode-10_3:
    macos:
      xcode: 10.3.0
  emscripten:
    docker:
    # 1.39.0 is the oldest on Docker. Anything before 1.39.2 is useless as emar
    # randomly asserts: https://github.com/emscripten-core/emscripten/pull/9742
    # Then, anything before 1.39.6 is useless as well because emar has a
    # filesystem race and randomly complains that a file doesn't exist:
    # https://github.com/mosra/magnum/issues/413,
    # https://github.com/emscripten-core/emscripten/pull/10161
    - image: emscripten/emsdk:1.39.6-upstream

commands:
  install-base-linux:
    parameters:
      extra:
        type: string
        default: ""
    steps:
    - run:
        name: Update apt and install base packages
        # Git is needed always for cloning Corrade, Magnum etc
        command: |
          apt update
          apt install -y git ninja-build << parameters.extra >>

  install-base-macos:
    parameters:
      extra:
        type: string
        default: ""
    steps:
    - run:
        name: Install base packages
        # As usual, homebrew takes five minutes to update and then explodes in
        # a spectacular way. How is this acceptable?!
        command: |
          HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake ninja << parameters.extra >>

  install-gcc-4_8:
    steps:
    - run:
        name: Install GCC 4.8
        # For some reason, CMake needs a working C compiler, so provice CC as
        # well for the case when default gcc isn't installed.
        command: |
          apt install -y g++-4.8
          echo 'export CC=gcc-4.8' >> $BASH_ENV
          echo 'export CXX=g++-4.8' >> $BASH_ENV

  install-cmake-3_4:
    steps:
    - run:
        name: Install CMake 3.4
        command: |
          apt install -y wget
          mkdir -p $HOME/cmake && cd $HOME/cmake
          wget -nc --no-check-certificate https://cmake.org/files/v3.4/cmake-3.4.3-Linux-x86_64.tar.gz
          tar --strip-components=1 -xzf cmake-3.4.3-Linux-x86_64.tar.gz
          echo 'export PATH=$HOME/cmake/bin:$PATH' >> $BASH_ENV
          source $BASH_ENV && cmake --version | grep 3.4

  install-imgui:
    steps:
    - run:
        name: Install ImGui
        command: |
          export IMGUI_VERSION=v1.72
          mkdir -p $HOME/imgui && cd $HOME/imgui
          wget --no-check-certificate https://github.com/ocornut/imgui/archive/$IMGUI_VERSION.tar.gz
          tar --strip-components=1 -xzf $IMGUI_VERSION.tar.gz

  build:
    parameters:
      script:
        type: string
    steps:
    - checkout
    - run:
        name: Build & test
        command: |
          if [ "$BUILD_STATIC" != "ON" ]; then export BUILD_STATIC=OFF; fi
          if [ "$BUILD_DEPRECATED" != "OFF" ]; then export BUILD_DEPRECATED=ON; fi
          if [ "$WITH_DART" != "OFF" ]; then export WITH_DART=ON; fi
          if [ "$TARGET_GLES2" == "ON" ]; then export TARGET_GLES3=OFF; fi
          if [ "$TARGET_GLES2" == "OFF" ]; then export TARGET_GLES3=ON; fi
          ./package/ci/<< parameters.script >>

jobs:
  linux:
    executor: ubuntu-16_04
    environment:
      PLATFORM_GL_API: GLX
      WITH_BOX2D: "ON"
      # DART temporarily disabled on Linux because of GCC 4 and 5 ABI mismatch
      # on 16.04: https://github.com/dartsim/dart/issues/967#issuecomment-469075835
      WITH_DART: "OFF"
    steps:
    - install-base-linux:
        extra: libgl1-mesa-dev libsdl2-dev libglfw3-dev libopenal-dev libbullet-dev libbox2d-dev libvulkan-dev wget
    - install-gcc-4_8
    - install-cmake-3_4
    - install-imgui
    - build:
        script: unix-desktop.sh

  linux-gles2:
    executor: ubuntu-16_04
    environment:
      PLATFORM_GL_API: EGL
      # STUPID yml interprets unquoted ON as a boolean
      TARGET_GLES2: "ON"
      WITH_BOX2D: "ON"
      # Disabled due to GCC 4/5 ABI mismatch, see above
      WITH_DART: "OFF"
    steps:
    - install-base-linux:
        extra: libgl1-mesa-dev libsdl2-dev libglfw3-dev libopenal-dev libbullet-dev libbox2d-dev wget
    - install-gcc-4_8
    - install-cmake-3_4
    - install-imgui
    - build:
        script: unix-desktop-gles.sh

  linux-gles3:
    executor: ubuntu-16_04
    environment:
      PLATFORM_GL_API: EGL
      # STUPID yml interprets unquoted OFF as a boolean
      TARGET_GLES2: "OFF"
      WITH_BOX2D: "ON"
      # Disabled due to GCC 4/5 ABI mismatch, see above
      WITH_DART: "OFF"
    steps:
    - install-base-linux:
        extra: libgl1-mesa-dev libsdl2-dev libglfw3-dev libopenal-dev libbullet-dev libbox2d-dev wget
    - install-gcc-4_8
    - install-cmake-3_4
    - install-imgui
    - build:
        script: unix-desktop-gles.sh

  linux-nondeprecated:
    executor: ubuntu-16_04
    environment:
      # STUPID yml interprets unquoted OFF as a boolean
      BUILD_DEPRECATED: "OFF"
      CMAKE_CXX_FLAGS: -DCORRADE_NO_ASSERT
      PLATFORM_GL_API: GLX
      WITH_BOX2D: "ON"
      # Disabled due to GCC 4/5 ABI mismatch, see above
      WITH_DART: "OFF"
    steps:
    - install-base-linux:
        extra: libgl1-mesa-dev libsdl2-dev libglfw3-dev libopenal-dev libbullet-dev libbox2d-dev libvulkan-dev wget
    - install-gcc-4_8
    - install-cmake-3_4
    - install-imgui
    - build:
        script: unix-desktop.sh

  macos:
    # Molten-vk isn't in (non-updated) Homebrew on the 9.4 or 10.0/1/2 image,
    # have to use 10.3 instead. Can't fake this with hand-installed
    # vulkan-loader because that one is built on 10.15 and can't be used on
    # older versions due to
    # dyld: lazy symbol binding failed: Symbol not found: ____chkstk_darwin
    executor: xcode-10_3
    environment:
      PLATFORM_GL_API: CGL
    steps:
    - install-base-macos:
        extra: sdl2 glfw bullet dartsim wget molten-vk
    - install-imgui
    - build:
        script: unix-desktop.sh

  emscripten-webgl1:
    executor: emscripten
    environment:
      # STUPID yml interprets unquoted ON as a boolean
      TARGET_GLES2: "ON"
    steps:
    - install-base-linux
    - install-imgui
    - build:
        script: emscripten.sh

  emscripten-webgl2:
    executor: emscripten
    environment:
      # STUPID yml interprets unquoted OFF as a boolean
      TARGET_GLES2: "OFF"
    steps:
    - install-base-linux
    - install-imgui
    - build:
        script: emscripten.sh

workflows:
  version: 2
  build:
    jobs:
    - linux
    - linux-gles2
    - linux-gles3
    - linux-nondeprecated
    - macos
    - emscripten-webgl1
    - emscripten-webgl2
